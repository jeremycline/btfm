---
name: Release
on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: feature or bugfix release
        options:
          - feature
          - bugfix
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Pull all history and tags
          fetch-depth: 0

      - name: Install latest stable Rust release
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Download cached dependencies
        uses: actions/cache@v2
        id: deepspeech-cache
        with:
          path: ~/cache
          key: ${{ runner.os }}

      - name: Download deepspeech
        if: steps.deepspeech-cache.outputs.cache-hit != 'true'
        run: |
          set -x
          mkdir -p ~/cache
          curl -L -o ~/cache/deepspeech.tar.xz \
            "https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/native_client.amd64.cpu.linux.tar.xz"

      - name: Install dependencies
        run: |
          mkdir deepspeech
          pushd deepspeech
          cp ~/cache/deepspeech.tar.xz .
          unxz deepspeech.tar.xz
          tar -xf deepspeech.tar
          sudo cp libdeepspeech.so /usr/local/lib/
          sudo ldconfig
          popd
          rm -rf deepspeech

          sudo apt update
          sudo apt install postgresql postgresql-contrib
          sudo systemctl restart postgresql.service
          sudo -u postgres createuser btfm
          sudo -u postgres createdb btfm
          sudo -u postgres psql -c "ALTER USER btfm PASSWORD 'password';"
          sudo -u postgres psql -c "ALTER DATABASE btfm OWNER to btfm;"
          export DATABASE_URL=postgres://btfm:password@localhost/btfm
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          cargo install cargo-edit
          cargo install sqlx-cli
          cargo sqlx database setup --source btfm/migrations/

      - name: Tag release
        run: |
          set -x

          btfm=${{ github.event.inputs.crate }}

          CURRENT_RELEASE=v"$(head -5 btfm/Cargo.toml | grep "^version.=." | awk '{gsub("\"", ""); print $3}')"
          if [ "${{ github.event.inputs.release_type }}" == "feature" ]; then
            cargo set-version -p btfm --bump minor
            cargo set-version -p btfm-cli --bump minor
            cargo set-version -p btfm-api-structs --bump minor
          else
            cargo set-version -p btfm --bump patch
            cargo set-version -p btfm-cli --bump patch
            cargo set-version -p btfm-api-structs --bump patch
          fi
          cargo check

          NEW_RELEASE=v"$(head -5 btfm/Cargo.toml | grep "^version.=." | awk '{gsub("\"", ""); print $3}')"

          git config --global user.email "github-bot@jcline.org"
          git config --global user.name "Automated Release"
          git checkout -b release
          git add --all
          git commit -m "$NEW_RELEASE"
          printf "# %s\n\n" "$NEW_RELEASE" > changelog
          printf "# Changes since %s\n\n" "$CURRENT_RELEASE" >> changelog
          git diff --stat "$CURRENT_RELEASE".. >> changelog
          git tag --annotate --file changelog "$NEW_RELEASE"
          git checkout main
          git pull
          git merge release
          git push origin main
          git push origin "$NEW_RELEASE"

          echo "TAG=$NEW_RELEASE" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: changelog
          tag_name: ${{ env.TAG }}
          generate_release_notes: true

      - name: Publish the CLI to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p btfm-cli

      - name: Publish the service to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p btfm

      - name: Create documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --document-private-items --no-deps

      - name: Bundle up the docs for Randy
        run: tar cvzf the-docs.tar.gz target/doc

      - name: Create release build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --profile=production

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./target/production/btfm
            ./target/production/btfm-cli
            ./the-docs.tar.gz
